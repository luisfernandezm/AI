# -*- coding: utf-8 -*-
"""RNconvolucionales(perros&gatos).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hxIiGX-vX_tXbP9JY6P2wT37u30a9Usj
"""

from google.colab import files
uploaded = files.upload()

!pip install kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# De la url del dataset se obtiene el nombre del programador y el nombre del dataset "halilsaglamlar/dog-cat"
!kaggle datasets download -d halilsaglamlar/dog-cat

# Descomprimir el archivo
!unzip dog-cat.zip

!ls

!ls data

import matplotlib.pyplot as plt
from PIL import Image

# Obtener las imagenes
imgRoute = '/content/data/train/cat/cat.0.jpg'

# Abrir imagen
img = Image.open(imgRoute)

# Mostrar imagen
plt.imshow(img)
plt.axis('off')
plt.show()

!ls /content/data/train/cat | head -5

# Graficar las imagenes
imgs5 = [
    'cat.0.jpg',
    'cat.10000.jpg',
    'cat.10001.jpg',
    'cat.10002.jpg',
    'cat.10003.jpg'
]
plt.figure(figsize = (15, 3))

for i, img5 in enumerate(imgs5):
  imgRoute = f'/content/data/train/cat/{img5}'
  img = Image.open(imgRoute)

  # Configuraci贸n de subplot
  plt.subplot(1, 5, i + 1)
  plt.imshow(img)
  plt.axis("off")
  plt.title(img5)

plt.tight_layout()
plt.show()

!ls /content/data/train/dog | head -5

# Graficar las imagenes
imgs5 = [
  '2462.jpg',
  '2464.jpg',
  '2465.jpg',
  '2466.jpg',
  '2467.jpg'
]
plt.figure(figsize = (15, 3))

for i, img5 in enumerate(imgs5):
  imgRoute = f'/content/data/train/dog/{img5}'
  img = Image.open(imgRoute)

  # Configuraci贸n de subplot
  plt.subplot(1, 5, i + 1)
  plt.imshow(img)
  plt.axis("off")
  plt.title(img5)

plt.tight_layout()
plt.show()

import os
import cv2
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf
import random

# Definici贸n de carpeta
main = '/content/data'
test = '/content/data/train'
train = '/content/data/train'
validation = '/content/data/validation'

# Preprocesamiento de datos
data = []
talla = 100
categorias = ['cat', 'dog']

for categoria in categorias:
  folder = os.path.join(train, categoria)
  label = categorias.index(categoria)

  for imagen in os.listdir(folder):
    imagenPath = os.path.join(folder, imagen)
    imagenArray = cv2.imread(imagenPath, cv2.IMREAD_GRAYSCALE)

    try:
      imagenArray = cv2.resize(imagenArray, (talla, talla))
      data.append([imagenArray, label])

    except Exception as e:
      print(str(e))

xTrain = []
yTrain = []

for imagenes, labels in data:
  xTrain.append(imagenes)
  yTrain.append(labels)

xTrain = np.array(xTrain).reshape(-1, talla, talla, 1)
yTrain = np.array(yTrain)

xTrain = xTrain / 255.0

len(data)

# Entrenando la red neuronal
modelo = tf.keras.models.Sequential()
modelo.add(tf.keras.layers.Flatten(input_shape = (talla, talla, 1))) # Input
modelo.add(tf.keras.layers.Dense(128, activation = 'relu')) # Capas intermedias / Primera capa oculta
modelo.add(tf.keras.layers.Dense(2, activation = 'softmax'))

modelo.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = 'accuracy')
modelo.fit(xTrain, yTrain, epochs = 20)

# Generar predicci贸n
def predecirImg(rutaImg):
  imgPrueba = cv2.imread(rutaImg, cv2.IMREAD_GRAYSCALE)
  imgPrueba = cv2.resize(imgPrueba, (talla, talla))
  imgPrueba = np.array(imgPrueba).reshape(-1, talla, talla, 1)
  imgPrueba = imgPrueba / 255.0

  prediction = modelo.predict([imgPrueba])
  print('Probabilidad gato: ', prediction[0][0])
  print('Probabilidad perro: ', prediction[0][1])

routeNewImg = '/content/cat.jpg'
predecirImg(routeNewImg)